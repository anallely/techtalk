{
  "name": "javascript-stringify",
  "version": "1.0.1",
  "description": "Stringify is to `eval` as `JSON.stringify` is to `JSON.parse`",
  "main": "javascript-stringify.js",
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/blakeembrey/javascript-stringify.git"
  },
  "keywords": [
    "stringify",
    "javascript",
    "object",
    "string"
  ],
  "author": {
    "name": "Blake Embrey",
    "email": "hello@blakeembrey.com",
    "url": "http://blakeembrey.me"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "chai": "^1.9.1",
    "istanbul": "^0.3.0",
    "mocha": "^1.21.3"
  },
  "readme": "# JavaScript Stringify\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Gittip][gittip-image]][gittip-url]\n\nStringify is to `eval` as `JSON.stringify` is to `JSON.parse`.\n\n## Installation\n\n```javascript\nnpm install javascript-stringify --save\nbower install javascript-stringify --save\n```\n\n### Node\n\n```javascript\nvar javascriptStringify = require('javascript-stringify');\n```\n\n### AMD\n\n```javascript\ndefine(function (require, exports, module) {\n  var javascriptStringify = require('javascript-stringify');\n});\n```\n\n### `<script>` tag\n\n```html\n<script src=\"javascript-stringify.js\"></script>\n```\n\n## Usage\n\n```javascript\njavascriptStringify(value[, replacer [, space]])\n```\n\nThe API is similar to `JSON.stringify`. However, any value returned by the replacer will be used literally. For this reason, the replacer is passed three arguments - `value`, `indentation` and `stringify`. If you need to continue the stringification process inside your replacer, you can call `stringify` with the updated value.\n\n### Examples\n\n```javascript\njavascriptStringify({});    // \"{}\"\njavascriptStringify(true);  // \"true\"\njavascriptStringify('foo'); // \"'foo'\"\n\njavascriptStringify({ x: 5, y: 6});       // \"{x:5,y:6}\"\njavascriptStringify([1, 2, 3, 'string']); // \"[1,2,3,'string']\"\n\n/**\n * Invalid key names are automatically stringified.\n */\n\njavascriptStringify({ 'some-key': 10 }); // \"{'some-key':10}\"\n\n/**\n * Some object types and values can remain identical.\n */\n\njavascriptStringify([/.+/ig, new Number(10), new Date()]); // \"[/.+/gi,new Number(10),new Date(1406623295732)]\"\n\n/**\n * Unknown or circular references are removed.\n */\n\nvar obj = { x: 10 };\nobj.circular = obj;\n\njavascriptStringify(obj); // \"{x:10}\"\n\n/**\n * Specify indentation - just like `JSON.stringify`.\n */\n\njavascriptStringify({ a: 2 }, null, ' ');             // \"{\\n a: 2\\n}\"\njavascriptStringify({ uno: 1, dos : 2 }, null, '\\t'); // \"{\\n\\tuno: 1,\\n\\tdos: 2\\n}\"\n\n/**\n * Add custom replacer behaviour - like double quoted strings.\n */\n\njavascriptStringify(['test', 'string'], function (value, indent, stringify) {\n  if (typeof value === 'string') {\n    return '\"' + value.replace(/\"/g, '\\\\\"') + '\"';\n  }\n\n  return stringify(value);\n});\n//=> '[\"test\",\"string\"]'\n```\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/javascript-stringify.svg?style=flat\n[npm-url]: https://npmjs.org/package/javascript-stringify\n[travis-image]: https://img.shields.io/travis/blakeembrey/javascript-stringify.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/javascript-stringify\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/javascript-stringify.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/javascript-stringify?branch=master\n[gittip-image]: https://img.shields.io/gittip/blakeembrey.svg?style=flat\n[gittip-url]: https://www.gittip.com/blakeembrey\n",
  "bugs": {
    "url": "https://github.com/blakeembrey/javascript-stringify/issues"
  },
  "homepage": "https://github.com/blakeembrey/javascript-stringify",
  "_id": "javascript-stringify@1.0.1",
  "_shasum": "fa0bdb1106e082b2f37e0a1953e9927b3e29cf34",
  "_from": "javascript-stringify@^1.0.0",
  "_resolved": "https://registry.npmjs.org/javascript-stringify/-/javascript-stringify-1.0.1.tgz"
}
