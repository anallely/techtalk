{
  "name": "raml-parser",
  "version": "0.8.10",
  "description": "A RAML parser based on PyYAML written in CoffeScript and available for use as NodeJs module or in-browser.",
  "repository": {
    "type": "git",
    "url": "git@github.com:raml-org/raml-js-parser.git"
  },
  "main": "./lib/raml.js",
  "browser": {
    "xmlhttprequest": false
  },
  "dependencies": {
    "json-lint": "~0.1.0",
    "q": "0.9.7",
    "uritemplate": "0.3.4",
    "xmlhttprequest": "1.6.0",
    "inflection": "~1.3.3"
  },
  "devDependencies": {
    "browserify": "~3.24.13",
    "chai": "1.8.1",
    "chai-as-promised": "4.1.0",
    "coffeeify": "0.5.2",
    "grunt": "0.4.1",
    "grunt-cli": "0.1.11",
    "grunt-coffeelint": "0.0.7",
    "grunt-contrib-coffee": "0.7.0",
    "grunt-contrib-connect": "0.5.0",
    "grunt-contrib-uglify": "0.2.2",
    "grunt-contrib-watch": "0.5.3",
    "grunt-mocha-cli": "1.3.0",
    "grunt-mocha-phantomjs": "0.3.1",
    "grunt-shell": "~0.6.4",
    "load-grunt-tasks": "~0.3.0",
    "mocha": "1.14.0",
    "pre-commit": "0.0.9"
  },
  "scripts": {
    "test": "grunt test",
    "build": "grunt build",
    "stage-build": "git add dist"
  },
  "pre-commit": [
    "build",
    "stage-build",
    "test"
  ],
  "readme": "# RAML Parser\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/raml-org/raml-js-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/raml-org/raml-js-parser.png)](https://travis-ci.org/raml-org/raml-js-parser)\n[![Dependency Status](https://david-dm.org/raml-org/raml-js-parser.png)](https://david-dm.org/raml-org/raml-js-parser)\n\nThis project contains a RAML parser capable (at this moment) of parsing version 0.8\nof the [RAML specification](http://raml.org/spec.html). The parser is written in CoffeeScript and its capable\nof running inside NodeJS as well as in-browser.\n\n## Versioning\n\nThe RAML parser is versioned in the following manner:\n\n```\nx.y.z\n```\n\nin which *x.y* denotes the version of the [RAML specification](http://raml.org/spec.html)\nand *z* is the version of the parser.\n\nSo *0.1.2* is the 2nd revision of the parser for the *0.1* version\nof the [RAML specification](http://raml.org/spec.html).\n\n### Contributing\nIf you are interested in contributing some code to this project, thanks! Please submit a [Contributors Agreement](https://api-notebook.anypoint.mulesoft.com/notebooks#bc1cf75a0284268407e4) acknowledging that you are transferring ownership.\n\nTo discuss this project, please use its [github issues](https://github.com/raml-org/raml-js-parser/issues) or the [RAML forum](http://forums.raml.org/).\n\n## Usage for NodeJS\n  \n### Load\n\nLoading a RAML file is as easy as follows:\n\n```javascript\n  var raml = require('raml-parser');\n  \n  raml.loadFile('myAPI.raml').then( function(data) {\n    console.log(data);\n  }, function(error) {\n    console.log('Error parsing: ' + error);\n  });\n```\n\nYou can alternatively load from a string containing the api definition:\n\n```javascript\n  var raml = require('raml-parser');\n  \n  var definition = [\n    '#%RAML 0.8',\n    '---',\n    'title: MyApi',\n    'baseUri: http://myapi.com',\n    '/Root:'\n  ].join('\\n');\n  \n  raml.load(definition).then( function(data) {\n    console.log(data);\n  }, function(error) {\n    console.log('Error parsing: ' + error);\n  });\n```\n\nThe shape of the returned object is (unofficially) documented in this [Typescript interface](https://github.com/aldonline/raml-typescript).\n\n### Abstract Syntax Tree\n\nGenerating an AST from a RAML file is as easy as follows:\n\n```javascript\n  var raml = require('raml-parser');\n  \n  var myAPI;\n  raml.composeFile('myAPI.raml').then( function(rootNode) {\n    console.log('Root Node: ' + rootNode)\n  }, function(error) {\n    console.log('Error parsing: ' + error);\n  });\n```\n\nyou can also alternatively generate an AST from a string containing the api definition:\n\n```javascript\n  var raml = require('raml-parser');\n  \n  var definition = [\n    '#%RAML 0.8',\n    '---',\n    'title: MyApi',\n    'baseUri: http://myapi.com',\n    '/Root:'\n  ].join('\\n');\n  \n  raml.compose(definition).then( function(rootNode) {\n    console.log('Root Node: ' + rootNode)\n  }, function(error) {\n    console.log('Error parsing: ' + error);\n  });\n```\n\n## Usage for In-Browser\n\nUsing the RAML parser from inside the browser requires the user to actually\ninclude the RAML javascript file in a script tag as follows:\n\n```html\n<script src=\"raml-parser.min.js\"></script>\n```\n\nfrom there on the usage is pretty much the same as NodeJS, the script\ndefines a *RAML.Parser* object globally which can be used as follows:\n\n```javascript\nRAML.Parser.loadFile('http://localhost:9001/myAPI.raml').then( function(data) {\n  console.log(data)\n}, function(error) {\n  console.log('Error parsing: ' + error);\n});\n```\n\nNotice that the in-browser version can fetch remote API definitions via XHR.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/raml-org/raml-js-parser/issues"
  },
  "homepage": "https://github.com/raml-org/raml-js-parser",
  "_id": "raml-parser@0.8.10",
  "_shasum": "0951bad92775b437ed5b158c6491aa465eba0b90",
  "_from": "raml-parser@^0.8.10",
  "_resolved": "https://registry.npmjs.org/raml-parser/-/raml-parser-0.8.10.tgz"
}
