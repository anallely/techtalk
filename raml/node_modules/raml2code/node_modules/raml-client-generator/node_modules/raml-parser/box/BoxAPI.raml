#%RAML 0.8
title: Box.com API
version: "2.0"
baseUri: https://api.box.com/{version}/
securitySchemes: 
  # The Box API uses OAuth 2 for authentication. An authorization header containing a valid access_token must be included in every request.
  - oauth_2_0: !include securitySchemes/oauth_2_0.raml
securedBy: [ oauth_2_0 ]
mediaType: application/json
resourceTypes:
  # usage: This resourceType should be used for any method of the API. It contains the required headers for each one and its standard responses
  - standardResponse: !include resourceTypes/standardResponse.raml
  - collection: !include resourceTypes/collection.raml
  - collectionItem: !include resourceTypes/collectionItem.raml
traits:
  - fieldAware: !include traits/fieldAware.raml
  - pageable: !include traits/pageable.raml
schemas:
  # collections
  - assignmentSummariesCollecton: !include schemas/assignmentSummariesCollecton.json
  - collaborationsCollection: !include schemas/collaborationsCollection.json
  - commentsCollection: !include schemas/commentsCollection.json
  - emailAliasesCollection: !include schemas/emailAliasesCollection.json
  - eventsCollection: !include schemas/eventsCollection.json
  - itemsCollection: !include schemas/itemsCollection.json
  - taskSummariesCollection: !include schemas/taskSummariesCollection.json
  - usersCollection: !include schemas/usersCollection.json
  - versionsCollection: !include schemas/versionsCollection.json

  # objects
  - collaboration: !include schemas/collaboration.json
  - comment: !include schemas/comment.json
  - email_alias: !include schemas/emailAlias.json
  - eventsPollInformation: !include schemas/eventsPollInformation.json
  - file: !include schemas/item.json
  - folder: !include schemas/item.json
  - item: !include schemas/item.json
  - newItem: !include schemas/newItem.json
  - searchResults: !include schemas/searchResults.json
  - task: !include schemas/task.json
  - task_assignment: !include schemas/assignment.json
  - user: !include schemas/user.json
  - userFolderMove: !include schemas/userFolderMove.json

  # aliased names to be used in collection resource type
  - newcollaboration: !include schemas/collaboration.json
  - newcomment: !include schemas/newComment.json  
  - newemail_alias: !include schemas/newEmailAlias.json
  - newfolder: !include schemas/newItem.json
  - newtask: !include schemas/newTask.json
  - newtask_assignment: !include schemas/newAssignment.json
  - newuser: !include schemas/newUser.json

  # aliased names to be used for PUTs in the collectionItem resource type
  - commentUpdate: !include schemas/commentUpdate.json
  - folderUpdate: !include schemas/newFolderMetadata.json
  - fileUpdate: !include schemas/newItem.json
  # tasks are accessed through /users/{user_id}/Tasks and /task_assignments
  - taskUpdate: !include schemas/taskUpdate.json
  - task_assignmentUpdate: !include schemas/assignmentUpdate.json
  - userUpdate: !include schemas/userUpdate.json

/folders:
  type:
    collection: { createItemResponseExample: !include schemas/folder-example.json }
  post:
    description: |
      Used to create a new empty folder. The new folder will be created
      inside of the specified parent folder
    body:
      example: |
        {
          "name": "New Folder",
          "parent": { 
            "id": "0"
          }
        }
  /{folderId}:
    type:
      collectionItem: { itemResponseExample: !include schemas/folder-example.json }
    uriParameters:
      folderId:
        description: |
          The ID of the parent folder
        type: string
    get:
      description: |
        Retrieves the full metadata about a folder, including information about
        when it was last updated as well as the files and folders contained in it.
        The root folder of a Box account is always represented by the id **0**.
    put:
      description: |
        Used to update information about the folder. To move a folder, update the ID
        of its parent. To enable an email address that can be used to upload files
        to this folder, update the `folder_upload_email` attribute. An optional
        If-Match header can be included to ensure that client only updates the folder
        if it knows about the latest version.
      body:
        example: |
          {
            "name":"New Folder Name!"
          }
    delete:
      description: |
        Used to delete a folder. A recursive parameter must be included in order to
        delete folders that have items inside of them. An optional `If-Match` header
        can be included to ensure that client only deletes the folder if it knows
        about the latest version.
      queryParameters:
        recursive:
          description: Whether to delete this folder if it has items inside of it.
          type: boolean
    post:
      description: |
        Restores an item that has been moved to the trash. Default behavior is to
        restore the item to the folder it was in before it was moved to the trash.
        If that parent folder no longer exists or if there is now an item with the
        same name in that parent folder, the new parent folder and/or new name
        will need to be included in the request.
      body:
        schema: newItem
        example: |
          {
            "name": "non-conflicting-name"
          }
      responses:
        201:
          description: Item was succesfully created.
          body:
            schema: item
            example: !include schemas/folder-example.json
  /copy:
    type: standardResponse
    post:
      description: |
        Used to create a copy of a folder in another folder. The original version
        of the folder will not be altered.
      body:
        schema: newItem
        example: |
          {
            "parent": {
              "id" : DESTINATION_FOLDER_ID
            }
          }
      responses:
        200:
          body:
            schema: item
            example: !include schemas/folder-example.json
  /trash:
    type: standardResponse
    get:
      description: |
        Retrieves an item that has been moved to the trash. The full item will be
        returned, including information about when the it was moved to the trash.
      responses:
        200:
          body:
            schema: item
            example: !include schemas/trashedFolder-example.json
    delete:
      description: |
        Permanently deletes an item that is in the trash. The item will no longer
        exist in Box. This action cannot be undone.
  /items:
    type: standardResponse
    get:
      is: [ fieldAware, pageable: { default: 100, maximum: 1000 } ]
      description: |
        Retrieves the files and/or folders contained within this folder
        without any other metadata about the folder.
      responses:
        200:
          body:
            schema: itemsCollection
            example: !include schemas/itemsCollection-example.json
  /collaborations:
    type: standardResponse
    get:
      description: |
        Use this to get a list of all the collaborations on a folder i.e. all of
        the users that have access to that folder.
      responses:
        200:
          body:
            schema: collaborationsCollection
            example: !include schemas/collaborationsCollection-example.json
  /trash/items:
    type: standardResponse
    get:
      is: [ fieldAware, pageable: { default: 100, maximum: 1000 } ]
      description: |
        Retrieves the files and/or folders that have been moved to the trash. Any
        attribute in the full files or folders objects can be passed in with the
        fields parameter to get specific attributes, and only those specific
        attributes back; otherwise, the mini format is returned for each item by
        default.
        Multiple attributes can be passed in separated by commas e.g.
        `fields=name,created_at`. Paginated results can be retrieved using the limit
        and offset parameters.
      responses:
        200:
          body:
            schema: itemsCollection
            example: !include schemas/itemsCollection-example.json
/files/{fileId}:
  type:
    collectionItem: { itemResponseExample: !include schemas/folder-example.json }
  uriParameters:
    fileId:
      description: Box's unique string identifying this file.
      type: string
  get:
    description: Used to retrieve the metadata about a file.
  put:
    description: |
      Used to update individual or multiple fields in the file object, including
      renaming the file, changing its description, and creating a shared link
      for the file. To move a file, change the ID of its parent folder. An optional
      `If-Match` header can be included to ensure that client only updates the file
      if it knows about the latest version.
    body:
      example: |
        {
          "name": "new name.jpg"
        }
  delete:
    description: |
      Discards a file to the trash. The 'etag' of the file can be included as an
      `If-Match` header to prevent race conditions.
      Trash: Depending on the enterprise settings for this user, the item will
      either be actually deleted from Box or moved to the trash.
    responses:
      204:
        description: Confirm deletion.
      412:
        description: If the `If-Match` header is sent and fails.
  post:
    description: |
      Restores an item that has been moved to the trash. Default behavior is to
      restore the item to the folder it was in before it was moved to the trash.
      If that parent folder no longer exists or if there is now an item with the
      same name in that parent folder, the new parent folder and/or new name will
      need to be included in the request.
    body:
      schema: newItem
      example: |
        {
          "name": "non-conflicting-name.jpg"
        }
    responses:
      201:
        body:
          schema: item
          example: !include schemas/trashedFile-example.json
  /content:
    type: standardResponse
    get:
      description: |
        Retrieves the actual data of the file. An optional version parameter can be
        set to download a previous version of the file.
      queryParameters:
        version:
          description: The ID specific version of this file to download.
          type: string
      responses:
        302:
          description: Found
        202:
          description: |
            If the file is not ready to be downloaded (i.e. in the case where the
            file was uploaded immediately before the download request), a response
            with an HTTP status of **202** Accepted will be returned with a `Retry-After`
            header indicating the time in seconds after which the file will be
            available for the client to download.
  /versions:
    type: standardResponse
    get:
      description: |
        If there are previous versions of this file, this method can be used to
        retrieve metadata about the older versions.
        **ALERT: Versions are only tracked for Box users with premium accounts.**
      responses:
        200:
          description: |
            An array of version objects are returned. If there are no previous
            versions of this file, then an empty array will be returned.
          body:
            schema: versionsCollection
            example: !include schemas/versionsCollection-example.json
  /copy:
    type: standardResponse
    post:
      description: |
        Used to create a copy of a file in another folder. The original version of
        the file will not be altered.
      body:
        schema: newItem
        example: |
          {
            "parent": {
              "id" : FOLDER_ID
             }
          }
      responses:
        200:
          body:
            schema: item
            example: !include schemas/file-example.json
        409:
          description: |
            Will be returned if the intended destination folder is the same, as this
            will cause a name collision.
  /thumbnail{extension}:
    type: standardResponse
    uriParameters:
     extension:
        description: |
          Generated file's extension. Currently thumbnails are only available in .png format
          and will only be generated for image file formats.
        type: string
        enum: [ ".png" ]
    get:
      description: |
        Retrieves a thumbnail, or smaller image representation, of this file. Sizes
        of 32x32, 64x64, 128x128, and 256x256 can be returned.
        Currently thumbnails are only available in .png format and will only be
        generated for image file formats.
        There are three success cases that your application needs to account for:
          - If the thumbnail isn't available yet, a 202 Accepted HTTP status will
              be returned, including a 'Location' header pointing to a placeholder
              graphic that can be used until the thumbnail is returned. A `Retry-After`
              header will also be returned, indicating the time in seconds after which
              the thumbnail will be available. Your application should only attempt to
              get the thumbnail again after Retry-After time.
          - If Box can't generate a thumbnail for this file type, a 302 Found
              response will be returned, redirecting to a placeholder graphic in the
              requested size for this particular file type.
          - If Box is unable to generate a thumbnail for this particular file, a
              404 'Not Found' response will be returned with a code of
              preview_cannot_be_generated. If there are any bad parameters sent in, a
              standard 400 'Bad Request' will be returned.
      queryParameters:
        min_height:
          description: The minimum height of the thumbnail.
          type: integer
        min_width:
          description: The minimum width of the thumbnail.
          type: integer
        max_height:
          description: The maximum height of the thumbnail
          type: integer
        max_width:
          description: The maximum width of the thumbnail
          type: integer
      responses:
        200:
          description: |
            The thumbnail image is returned
        202:
          description: |
            The thumbnail isn't available yet. HTTP status is returned, including
            a Location header pointing to a placeholder graphic that can be used
            until the thumbnail is returned.
          headers:
            Retry-After:
              description: |
                Number of seconds to wait before retrying generating the thumbnail
                generation
              required: true
              type: integer
        302:
          description: |
            Box can't generate a thumbnail for this file type. The response
            redirects to a placeholder graphic in the requested size for this
            particular file type
  /trash:
    type: standardResponse
    get:
      description: |
        Retrieves an item that has been moved to the trash. The full item will be
        returned, including information about when the it was moved to the trash.
      responses:
        200:
          body:
            schema: item
            example: !include schemas/trashedFile-example.json
    delete:
      description: |
        Permanently deletes an item that is in the trash. The item will no longer
        exist in Box. This action cannot be undone.
  /comments:
    type: standardResponse
    get:
      description: |
        Retrieves the comments on a particular file, if any exist. A collection of
        comment objects are returned. If there are no comments on the file, an empty
        comments array is returned.
      responses:
        200:
          body:
           schema: commentsCollection
           example: !include schemas/commentsCollection-example.json
  /task:
    type: standardResponse
    get:
      description: |
        Retrieves all of the tasks for given file. A collection of mini task objects
        is returned. If there are no tasks, an empty collection will be returned.
      responses:
        200:
          body:
            schema: taskSummariesCollection
            example: !include schemas/taskSummariesCollection-example.json
/shared_items:
  type: standardResponse
  get:
    headers:
      BoxApi:
        type: string
        required: true
        description: |
          A string containing the shared link and the password, it should be URL
          encoded, the format is:
          ```
            shared_link=[shared resource's link] shared_link_password=[password for the link]
          ```
          shared_link is mandatory.
    description: |
      Used to retrieve the metadata about a shared item when only given a shared
      link. Because of varying permission levels for shared links, a password may
      be required to retrieve the shared item. Once the item has been retrieved,
      you can make API requests against the actual resource `/files/{id}` or
      `/folders/{id}` as long as the shared link and optional password are in the
      header.
      A full file or folder object is returned if the shared link is valid and the
      user has access to it. An error may be returned if the link is invalid, if a
      password is required, or if the user does not have access to the file.
    responses:
      200:
        body:
          schema: item
          example: !include schemas/file-example.json
/comments:
  type:
    collection: { createItemResponseExample: !include schemas/comment-example.json }
  post:
    description: |
      Used to add a comment by the user to a specific file or comment (i.e. as a
      reply comment).
    body:
      example: |
        {
          "item": {
            "type": "file",
            "id": "FILE_ID"
          },
          "message": "YOUR_MESSAGE"
        }
  /{commentId}:
    type:
      collectionItem: { itemResponseExample: !include schemas/comment-example.json }
    uriParameters:
      commentId:
        description: Box's unique string identifying this comment.
    get:
      description: |
        Used to retrieve the message and metadata about a specific comment.
        Information about the user who created the comment is also included.
    put:
      description: |
        Used to update the message of the comment. The full updated comment objec
        is returned if the ID is valid and if the user has access to the comment.
      body:
        example: |
          {
            "message":"My New Message"
          }
    delete:
      description: |
        Permanently deletes a comment. An empty 200 response is returned to confirm
        deletion of the comment. Errors can be thrown if the ID is invalid or if the
        user is not authorized to delete this particular comment.
      responses:
        200:
         description: Confirm deletion of the comment.
/collaborations:
  type:
    collection: { createItemResponseExample: !include schemas/collaboration-example.json }
  post:
    description: |
      Used to add a collaboration for a single user to a folder. Either an email
      address or a user ID can be used to create the collaboration.
    body:
      example: |
        {
          "item": {
            "id": "FOLDER_ID",
            "type": "folder"
          },
          "accessible_by": {
            "id": "USER_ID"
          },
          "role": "editor"
        }
  /{collabId}:
    type: standardResponse
    uriParameters:
      collabId:
        description: Box's unique string identifying this collaboration.
        type: string
    get:
      description: |
        Used to get information about a single collaboration. All collaborations
        for a single folder can be retrieved through
        `GET /folders/{id}/collaborations`.
        The collaboration object is returned. Errors may occur if the IDs are
        invalid or if the user does not have permissions to see the collaboration.
      queryParameters:
        status:
          description: Can only be 'pending'.
          enum: [ "pending" ]
      responses:
        200:
          body:
            schema: collaboration
            example: !include schemas/collaboration-example.json
    put:
      description: |
        Used to edit an existing collaboration. The updated collaboration object
        is returned. Errors may occur if the IDs are invalid or if the user does
        not have permissions to edit the collaboration.
      body:
        schema: collaboration
        example: |
          { 
            "role": "viewer"
          }
      responses:
        200:
          body:
            schema: collaboration
            example: !include schemas/collaboration-example.json
    delete:
      description: |
        Used to delete a single collaboration. A blank 200 response is returned if
        the ID is valid, and the user has permissions to remove the collaboration.
      responses:
        200:
          description: User removed.
/search:
 type: standardResponse
 get:
  is: [ pageable: { default: 30, maximum: 200} ]
  description: |
    Searching a User's Account. The search endpoint provides a simple way of
    finding items that are accessible in a given user's Box account.
    A collection of search results is returned. If there are no matching search
    results, the entries array will be empty.
    ALERT: We'll be adding more types of items returned as search results and more
    filters on search queries, so as you're parsing the results, be prepared to skip
    over any types of items your app does not recognize.
  queryParameters:
    query:
      description: |
        The string to search for; can be matched against item names, descriptions,
        text content of a file, and other fields of the different item types.
      required: true
      type: string
  responses:
    200:
      body:
        schema: searchResults
        example: !include schemas/searchResults-example.json
/events:
  type: standardResponse
  get:
    description: |
      Use this to get events for a given user. A chunk of event objects is
      returned for the user based on the parameters passed in. Parameters
      indicating how many chunks are left as well as the next stream_position
      are also returned.
    queryParameters:
      stream_position:
        description: |
          The location in the event stream at which you want to start receiving
          events. Can specify special case _now_ to get 0 events and the lates
          stream position for initialization. A collection of events is returned.
        type: string
        default: 0
      stream_type:
        description: Limits the type of events returned
        enum: [ "all", "chages", "sync" ]
        default: all
      limit:
        description: Limits the number of events returned
        type: integer
        default: 100
    responses:
      200:
        body:
          schema: eventsCollection
          example: !include schemas/eventsCollection-example.json
  options:
    description: |
      Long polling. To get real-time notification of activity in a Box account,
      use the long poll feature of the /events API.
      To do so, first call the `/events` API with an OPTIONS call to retrieve the
      long poll URL to use.
      Next, make a GET request to the provided URL to begin listening for events.
      If an event occurs within an account you are monitoring, you will receive a
      response with the value new_change.
      It's important to note that this response will not come with any other
      details, but should serve as a prompt to take further action such as calling
      the `/events` endpoint with your last known `stream_position`. After sending
      this response, the server will close the connection and you will need to
      repeat the long poll process to begin listening for events again.
      If no events occur for a period of time after you make the GET request to
      the long poll URL, you will receive a response with the value reconnect. When
      you receive this response, you'll make another OPTIONS call to the /events
      endpoint and repeat the long poll process.
    responses:
      200:
        body:
          schema: eventsPollInformation
          example: !include schemas/eventsPollInformation-example.json
/users:
  type:
    collection: { createItemResponseExample: !include schemas/user-example.json }
  get:
    description: |
      Get All Users in an Enterprise. Returns a list of all users for the
      Enterprise along with their user_id, public_name, and login.
    is: [ pageable: { default: 100, maximum: 1000 } ]
    queryParameters:
      filter_term:
        description: |
          A string used to filter the results to only users starting with the
          `filter_term` in either the name or the login
        type: string
    responses:
      200:
        body:
          schema: usersCollection
          example: !include schemas/usersCollection-example.json
  post:
    description: |
      Used to provision a new user in an enterprise. This method only works
      for enterprise admins.
    body:
      example: |
        {
          "login": "eddard@box.com",
          "name": "Ned Stark"
        }
  /me:
    type: standardResponse
    get:
      description: |
        Get the Current User's Information. Retrieves information about the user who
        is currently logged in i.e. the user for whom this auth token was generated.
        Returns a single complete user object.
        An error is returned if a valid auth token is not included in the API request.
      responses:
        200:
          body:
            schema: user
            example: !include schemas/user-example.json
  /{userId}:
    type: standardResponse
    uriParameters:
      userId:
        description: Box's unique string identifying this user.
        type: string
    put:
      description: |
        Update a User's Information. Used to edit the settings and information abou
        a user. This method only works for enterprise admins. To roll a user out of
        the enterprise (and convert them to a standalone free user), update the
        special `enterprise` attribute to be `null`.
        Returns the a full user object for the updated user. Errors may be thrown when
        the fields are invalid or this API call is made from a non-admin account.
      queryParameters:
        notify:
          description: |
            Whether the user should receive an email when they are rolled out of an
            enterprise
          type: boolean
      body:
        schema: userUpdate
        example: |
          {
            "name": "sean"
          }
      responses:
        200:
          body:
            schema: user
            example: !include schemas/user-example.json
    delete:
        description: |
          Deletes a user in an enterprise account. An empty 200 response is sent to
          confirm deletion of the user. If the user still has files in their accoun
          and the `force` parameter is not sent, an error is returned.
        queryParameters:
          notify:
            description: |
              Determines if the destination user should receive email notification of
              the transfer.
            type: boolean
          force:
            description: |
              Whether or not the user should be deleted even if this user still own files.
            type: boolean
        responses:
          200:
            description: Confirm deletion of the user.
    /folders/{folderId}:
      type: standardResponse
      uriParameters:
        folderId:
          description: Folder's identifier
          type: string
      put:
        description: |
          Move Folder into Another User's Folder.
          Moves all of the content from within one user's folder into a new folder in
          another user's account. You can move folders across users as long as the you
          have administrative permissions. To move everything from the root folder,
          use "0" which always represents the root folder of a Box account.
          Returns the information for the newly created destination folder. An error
          is thrown if you do not have the necessary permissions to move the folder.
          Alert: folder_id: Currently only moving of the root folder (0) is supported.
        queryParameters:
          notify:
            description: |
              Determines if the destination user should receive email notification of
              the transfer.
            type: boolean
        body:
          schema: userFolderMove
          example: |
            {
              "owned_by": {
                "id": "USER_ID"
              }
            }
        responses:
          200:
            body:
              schema: item
              example: !include schemas/folder-example.json
    /email_aliases:
      type:
        collection: { createItemResponseExample: !include schemas/emailAlias-example.json }
      get:
        description: |
          Get All Email Aliases for a User.
          Retrieves all email aliases for this user. The collection of email aliases
          does not include the primary login for the user; use GET /users/USER_ID to
          retrieve the login email address.
          If the user_id is valid a collection of email aliases will be returned.
        responses:
          200:
            body:
              schema: emailAliasesCollection
              example: !include schemas/emailAliasesCollection-example.json
      post:
        description: |
          Add an Email Alias for a User.
          Adds a new email alias to the given user's account.
          Returns the newly created email_alias object. Errors will be thrown if the
          user_id is not valid or the particular user's email alias cannot be modified.
        body:
          example: |
            {
              "email: "dglover2@box.com"
            }
      /{email_aliases_id}:
        type: standardResponse
        delete:
          description: |
            Removes an email alias from a user. If the user has permission to remove
            this email alias, an empty 204 No Content response will be returned to
             confirm deletion.
          responses:
            204:
              description: Email alias removed.
/tasks:
  type:
    collection: { createItemResponseExample: !include schemas/task-example.json }
  post:
    description: |
      Create a Task. Used to create a single task for single user on a single file.
      A new task object will be returned upon success.
    body:
      example: |
        {
          "item": {
            "type": "file", "id": "FILE_ID"
          },
          "action": "review"
        }
  /{taskId}:
    type:
      collectionItem: { itemResponseExample: !include schemas/task-example.json }
    get:
      description: Fetches a specific task.
    put:
      description: Updates a specific task.
      body:
        example: |
          {
            "message": "REVIEW PLZ K THX"
          }
    delete:
      description: |
        Permanently deletes a specific task. An empty 204 response will be
        returned upon success.
    /assignments:
      type: standardResponse
      get:
        description: |
          Retrieves all of the assignments for a given task.
          A collection of task assignment mini objects will be returned upon success.
        responses:
          200:
            body:
              schema: assignmentSummariesCollecton
              example: !include schemas/assignmentSummariesCollecton-example.json
/task_assignments:
  type:
    collection: { createItemResponseExample: !include schemas/assignment-example.json }
  post:
    description: |
      Used to assign a task to a single user. There can be multiple assignments
      on a given task.
      A new task assignment object will be returned upon success.
    body:
      example: |
        {
          "task": {
            "id": "1992432", "type": "task"
          },
          "assign_to": {
            "id": "1992432"
          }
        }
  /{task_assignments_id}:
    type:
      collectionItem: { itemResponseExample: !include schemas/assignment-example.json }
    get:
      description: |
        Fetches a specific task assignment.
        The specified task assignment object will be returned upon success.
    put:
      description: |
        Used to update a task assignment.
        A new task assignment object will be returned upon success.
      body:
        example: |
          {
            "message": "hello!!!"
          }
    delete:
      description: |
        Deletes a specific task assignment.
        An empty `204 No Content` response will be returned upon success.