{
  "name": "data2code",
  "version": "0.0.3",
  "description": "Codegenerator for data",
  "main": "lib/data2code.js",
  "dependencies": {
    "handlebars": "~2.0.0-alpha.4"
  },
  "devDependencies": {
    "gulp": "3.8.10",
    "gulp-coffee": "2.2.0",
    "gulp-mocha": "1.0.0",
    "chai": "~1.9.1",
    "del": "^1.1.1",
    "mocha": "~1.20.1",
    "raml-parser": "0.8.7",
    "gulp-util": "3.0.1",
    "run-sequence": "^1.0.2"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Tomas Salazar"
  },
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "git://github.com/gextech/data2code"
  },
  "bugs": {
    "url": "https://github.com/gextech/data2code/issues"
  },
  "homepage": "https://github.com/gextech/data2code",
  "directories": {
    "test": "test"
  },
  "gitHead": "0bf4ed60f9165809e5ae1531d0f6aedf16d9ca1b",
  "_id": "data2code@0.0.3",
  "_shasum": "e2d0eaa919bd8c8afc79748a2dcd9a2b54e7c8f8",
  "_from": "data2code@0.0.3",
  "_npmVersion": "1.4.23",
  "_npmUser": {
    "name": "atomsfat",
    "email": "atomsmail+npm@gmail.com"
  },
  "maintainers": [
    {
      "name": "atomsfat",
      "email": "atomsmail+npm@gmail.com"
    }
  ],
  "dist": {
    "shasum": "e2d0eaa919bd8c8afc79748a2dcd9a2b54e7c8f8",
    "tarball": "http://registry.npmjs.org/data2code/-/data2code-0.0.3.tgz"
  },
  "_resolved": "https://registry.npmjs.org/data2code/-/data2code-0.0.3.tgz",
  "readme": "# data to code generator\n\n[![Build Status](https://img.shields.io/travis/gextech/data2code/master.svg?style=flat)](https://travis-ci.org/gextech/data2code)\n  \n  * This module generate code from a javascript Object\n  * It uses Handlebars templates\n  * It's primary use is to make code from [raml-js-parser](https://github.com/raml-org/raml-js-parser)\n  \n## Defining a Generator\n\nUsually a generator it's responsible for certain path of the javascript object.\n \nA generator is a simple object with the following properties:\n\n * Required properties:\n    * template -> Handlebars template.\n    * parser(data) -> Function it receives RAML parsed data, returns parsed data\n      The parser must return and array of object each object must have name and content properties\n\nSample:\n```javascript\n[ { name: \"test.test\", \n    model: {\n      title:data.title + \" finos\"\n      }\n  }\n]\n```\n * Optional properties:\n    * handleRender([str]) -> This function handles the render results, usually writes to disk. \n    * helpers -> Handlebars helpers.  \n    * partials -> Handlebars partials. \n\n\n##Usage \n\n```javascript\nvar data2Code = require('data2Code');\nvar raml = require('raml-parser');\n\nvar simpleGen = {};\nsimpleGen.template = '{{title}}';\nvar handleRender = function (result) {\n  console.log(result);\n}\n\n\nraml.loadFile('myAPI.raml').then( function(data){\n  data2Code.process(data, simpleGen);   \n  data2Code.process(data, anotherGen);\n}, function(error) {\n  console.log('Error parsing: ' + error);\n});\n\n",
  "readmeFilename": "README.md"
}
