{
  "name": "deref",
  "version": "0.2.6",
  "description": "JSON-Schema $ref resolution",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/gextech/deref"
  },
  "devDependencies": {
    "clone": "^0.1.18",
    "glob": "^4.2.1",
    "grunt": "^0.4.5",
    "grunt-parts": "^0.3.0",
    "jayschema": "^0.3.1",
    "tv4": "^1.1.4",
    "z-schema": "^3.1.3"
  },
  "gitHead": "40de111db536215d28dedb5eec10733a75d976b4",
  "bugs": {
    "url": "https://github.com/gextech/deref/issues"
  },
  "homepage": "https://github.com/gextech/deref",
  "_id": "deref@0.2.6",
  "scripts": {},
  "_shasum": "fff2da9925337f1562c0c0ec3ad0743fd00ba209",
  "_from": "deref@0.2.6",
  "_npmVersion": "1.4.23",
  "_npmUser": {
    "name": "pateketrueke",
    "email": "pateketrueke@gmail.com"
  },
  "maintainers": [
    {
      "name": "pateketrueke",
      "email": "pateketrueke@gmail.com"
    }
  ],
  "dist": {
    "shasum": "fff2da9925337f1562c0c0ec3ad0743fd00ba209",
    "tarball": "http://registry.npmjs.org/deref/-/deref-0.2.6.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/deref/-/deref-0.2.6.tgz",
  "readme": "Do you have $ref's ?\n====================\n\nA simple way for solving `$ref` values:\n\n```javascript\nvar deref = require('deref');\n```\n\nSchema dereferencing\n--------------------\n\n```javascript\n$ = deref();\n\nvar a = {\n  id: 'a',\n  type: 'object',\n  properties: {\n    b: {\n      $ref: 'b'\n    }\n  }\n};\n\nvar b = {\n  id: 'b',\n  type: 'string'\n};\n\nvar c = {\n  id: 'c',\n  type: 'array',\n  items: {\n    $ref: 'a'\n  }\n};\n\nconsole.log($(c, [b, a]).id);\n// output: http://json-schema.org/c#\n\nconsole.log($(c, [b, a], true).items.properties.b.type);\n// output: string\n```\n\nSchema normalization\n--------------------\n\n```javascript\nvar schema = {\n  id: 'http://x.y.z/rootschema.json#',\n  schema1: {\n    id: '#foo'\n  },\n  schema2: {\n    id: 'otherschema.json',\n    nested: {\n      id: '#bar'\n    },\n    alsonested: {\n      id: 't/inner.json#a'\n    }\n  },\n  schema3: {\n    id: 'some://where.else/completely#'\n  }\n};\n\nconsole.log(deref.util.normalizeSchema(schema).schema2.nested.id);\n// output: http://x.y.z/otherschema.json#bar\n```\n\n\nBasic usage\n===========\n\nThe resulting function of calling `deref()` can accept three arguments:\n\n- **fakeroot** (string)\n\n  Used on missing `$schema` values for resolve into fully qualified URIs.\n\n  ```javascript\n  console.log($('http://example.com', { id: '#foo' }).id);\n  // output: http://example.com#foo\n  ```\n\n  If missing will use `http://json-schema.org/schema`.\n\n- **schema** (object)\n\n  The JSON-Schema object for dereferencing.\n\n- **refs** (array)\n\n  Any additional schemas used while dereferencing.\n\n  Since `0.2.4` passing an object is not longer supported.\n\n- **ex** (boolean)\n\n  Whether do full dereferencing or not, `false` by default.\n\nExamples\n--------\n\n```javascript\n$('http://example.com', schema, true);\n$(schema, refs, true);\n$(schema, true);\n```\n\nUtilities\n---------\n\nAside the basics of `$`, this function will include:\n\n- **$.refs** (object)\n\n  An registry of dereferenced schemas.\n\n- **$.util** (object)\n\n  Exposes the internal helpers used by `deref`.\n\n  - `isURL(path)`\n  - `parseURI(href)`\n  - `resolveURL(base, href)`\n  - `getDocumentURI(path)`\n  - `findByRef(uri, refs)`\n  - `resolveSchema(schema, refs)`\n  - `normalizeSchema(fakeroot, schema)`\n\nAny `refs` passed MUST be an object of normalized schemas.\n\nNote that calling `$(schema)` will not read/download any local/remote files.\n\nSince `0.2.1` the `$schema` and `id` are no longer required for schema normalization.\n\n[![Build Status](https://travis-ci.org/gextech/deref.png?branch=master)](https://travis-ci.org/gextech/deref) [![NPM version](https://badge.fury.io/js/deref.png)](http://badge.fury.io/js/deref) [![Coverage Status](https://coveralls.io/repos/gextech/deref/badge.png?branch=master)](https://coveralls.io/r/gextech/deref?branch=master)\n",
  "readmeFilename": "README.md"
}
